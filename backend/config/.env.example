# Legal Document Severity Classification System - Environment Variables Template
# Copy this file to .env and fill in your actual values

# =============================================================================
# REQUIRED - API Keys and Project Configuration
# =============================================================================

# Gemini API Configuration
# Get your API key from: https://makersuite.google.com/app/apikey
GEMINI_API_KEY="your_gemini_api_key_here"

# Google Cloud Configuration
# Your Google Cloud Project ID (create at: https://console.cloud.google.com)
GOOGLE_CLOUD_PROJECT_ID="your_project_id_here"

# Firestore Database ID (usually "(default)" for new projects)
FIRESTORE_DATABASE_ID="(default)"

# =============================================================================
# CREDENTIALS - Choose ONE method based on deployment
# =============================================================================

# Method 1: Local Development - Path to service account key file
# Download from Google Cloud Console > IAM & Admin > Service Accounts
GOOGLE_APPLICATION_CREDENTIALS="./service-account-key.json"

# Method 2: Render/Cloud Deployment - Service account key as JSON string
# Set this in your deployment platform's environment variables
# SERVICE_KEY_JSON='{"type":"service_account","project_id":"your-project","private_key_id":"...","private_key":"-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n","client_email":"...","client_id":"...","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_x509_cert_url":"..."}'

# =============================================================================
# OPTIONAL - Application Configuration
# =============================================================================

# Application Environment
ENVIRONMENT="development"
LOG_LEVEL="INFO"
DEBUG="false"

# Server Configuration
HOST="0.0.0.0"
PORT="8000"
WORKERS="1"

# Google Cloud Vision API (for OCR)
VISION_API_ENABLED="true"

# =============================================================================
# OPTIONAL - Classification Settings
# =============================================================================

# Confidence thresholds for classification routing
DEFAULT_CONFIDENCE_THRESHOLD_AUTO_ACCEPT="0.85"
DEFAULT_CONFIDENCE_THRESHOLD_HUMAN_REVIEW="0.60"

# Context retrieval settings
DEFAULT_TOP_K_BUCKETS="3"
DEFAULT_TOP_N_CONTEXT_CHUNKS="5"

# =============================================================================
# OPTIONAL - Performance and Rate Limiting
# =============================================================================

# Performance settings
MAX_CONCURRENT_REQUESTS="100"
REQUEST_TIMEOUT="300"
GEMINI_RATE_LIMIT="60"

# =============================================================================
# OPTIONAL - Security and CORS
# =============================================================================

# CORS settings (use specific domains in production)
CORS_ORIGINS="*"
API_KEY_HEADER="X-API-Key"

# =============================================================================
# OPTIONAL - Monitoring and Metrics
# =============================================================================

# Monitoring configuration
ENABLE_METRICS="true"
METRICS_PORT="9090"
HEALTH_CHECK_INTERVAL="30"

# =============================================================================
# DEPLOYMENT NOTES
# =============================================================================

# For Local Development:
# 1. Copy this file to .env
# 2. Set GEMINI_API_KEY and GOOGLE_CLOUD_PROJECT_ID
# 3. Download service account key to ./service-account-key.json
# 4. Run: uv run uvicorn main:app --reload

# For Render Deployment:
# 1. Set environment variables in Render dashboard
# 2. Use SERVICE_KEY_JSON instead of GOOGLE_APPLICATION_CREDENTIALS
# 3. Set ENVIRONMENT="production"
# 4. The app will start automatically

# For Other Cloud Platforms:
# 1. Set all REQUIRED variables as environment variables
# 2. Use SERVICE_KEY_JSON for credentials
# 3. Adjust HOST/PORT as needed for your platform